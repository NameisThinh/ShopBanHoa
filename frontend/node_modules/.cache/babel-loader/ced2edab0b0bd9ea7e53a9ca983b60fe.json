{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productsReducer, newProductReducer, productReducer, productDetailsReducer, newReviewReducer, productReviewsReducer, reviewReducer, ascendingProductReduce } from \"./reducers/productReducers\";\nimport { authReducer, userReducer, forgotPasswordReducer, allUsersReducer, userDetailsReducer } from \"./reducers/userReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\";\nimport { newOrderReducer, myOrdersReducer, orderDetailsReducer, allOrdersReducer, orderReducer } from \"./reducers/orderReducers\";\nimport { newMessageReduce } from \"./reducers/messageReducers\";\nconst reducer = combineReducers({\n  //Products\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer,\n  ascending: ascendingProductReduce,\n  // User\n  auth: authReducer,\n  user: userReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  forgotPassword: forgotPasswordReducer,\n  //Cart\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  allOrders: allOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  order: orderReducer,\n  newReview: newReviewReducer,\n  //messeage\n  newMessage: newMessageReduce\n});\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n    shippingInfo: localStorage.getItem(\"shippingInfo\") ? JSON.parse(localStorage.getItem(\"shippingInfo\")) : {}\n  }\n};\nconst middlware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middlware)));\nexport default store;","map":{"version":3,"sources":["D:/Project/ShopBanHoa/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productsReducer","newProductReducer","productReducer","productDetailsReducer","newReviewReducer","productReviewsReducer","reviewReducer","ascendingProductReduce","authReducer","userReducer","forgotPasswordReducer","allUsersReducer","userDetailsReducer","cartReducer","newOrderReducer","myOrdersReducer","orderDetailsReducer","allOrdersReducer","orderReducer","newMessageReduce","reducer","products","productDetails","newProduct","product","productReviews","review","ascending","auth","user","allUsers","userDetails","forgotPassword","cart","newOrder","myOrders","allOrders","orderDetails","order","newReview","newMessage","initialState","cartItems","localStorage","getItem","JSON","parse","shippingInfo","middlware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SACEC,eADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,qBAJF,EAKEC,gBALF,EAMEC,qBANF,EAOEC,aAPF,EAQEC,sBARF,QASO,4BATP;AAUA,SACEC,WADF,EAEEC,WAFF,EAGEC,qBAHF,EAIEC,eAJF,EAKEC,kBALF,QAMO,yBANP;AAOA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,YALF,QAMO,0BANP;AAOA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,MAAMC,OAAO,GAAGxB,eAAe,CAAC;AAC9B;AACAyB,EAAAA,QAAQ,EAAErB,eAFoB;AAG9BsB,EAAAA,cAAc,EAAEnB,qBAHc;AAI9BoB,EAAAA,UAAU,EAAEtB,iBAJkB;AAK9BuB,EAAAA,OAAO,EAAEtB,cALqB;AAM9BuB,EAAAA,cAAc,EAAEpB,qBANc;AAO9BqB,EAAAA,MAAM,EAAEpB,aAPsB;AAS9BqB,EAAAA,SAAS,EAAEpB,sBATmB;AAW9B;AACAqB,EAAAA,IAAI,EAAEpB,WAZwB;AAa9BqB,EAAAA,IAAI,EAAEpB,WAbwB;AAc9BqB,EAAAA,QAAQ,EAAEnB,eAdoB;AAe9BoB,EAAAA,WAAW,EAAEnB,kBAfiB;AAgB9BoB,EAAAA,cAAc,EAAEtB,qBAhBc;AAkB9B;AACAuB,EAAAA,IAAI,EAAEpB,WAnBwB;AAoB9BqB,EAAAA,QAAQ,EAAEpB,eApBoB;AAqB9BqB,EAAAA,QAAQ,EAAEpB,eArBoB;AAsB9BqB,EAAAA,SAAS,EAAEnB,gBAtBmB;AAuB9BoB,EAAAA,YAAY,EAAErB,mBAvBgB;AAwB9BsB,EAAAA,KAAK,EAAEpB,YAxBuB;AAyB9BqB,EAAAA,SAAS,EAAEnC,gBAzBmB;AA2B5B;AAEFoC,EAAAA,UAAU,EAAErB;AA7BkB,CAAD,CAA/B;AAgCA,IAAIsB,YAAY,GAAG;AACjBR,EAAAA,IAAI,EAAE;AACJS,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP,EAHA;AAIJG,IAAAA,YAAY,EAAEJ,YAAY,CAACC,OAAb,CAAqB,cAArB,IACVC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADU,GAEV;AANA;AADW,CAAnB;AAWA,MAAMI,SAAS,GAAG,CAAClD,KAAD,CAAlB;AACA,MAAMmD,KAAK,GAAGtD,WAAW,CACvByB,OADuB,EAEvBqB,YAFuB,EAGvB1C,mBAAmB,CAACF,eAAe,CAAC,GAAGmD,SAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport {\n  productsReducer,\n  newProductReducer,\n  productReducer,\n  productDetailsReducer,\n  newReviewReducer,\n  productReviewsReducer,\n  reviewReducer,\n  ascendingProductReduce,\n} from \"./reducers/productReducers\";\nimport {\n  authReducer,\n  userReducer,\n  forgotPasswordReducer,\n  allUsersReducer,\n  userDetailsReducer,\n} from \"./reducers/userReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\";\nimport {\n  newOrderReducer,\n  myOrdersReducer,\n  orderDetailsReducer,\n  allOrdersReducer,\n  orderReducer,\n} from \"./reducers/orderReducers\";\nimport { newMessageReduce } from \"./reducers/messageReducers\";\n\nconst reducer = combineReducers({\n  //Products\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer,\n  \n  ascending: ascendingProductReduce,\n\n  // User\n  auth: authReducer,\n  user: userReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  forgotPassword: forgotPasswordReducer,\n\n  //Cart\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  allOrders: allOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  order: orderReducer,\n  newReview: newReviewReducer,\n  \n    //messeage\n\n  newMessage: newMessageReduce\n});\n\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\")\n      ? JSON.parse(localStorage.getItem(\"cartItems\"))\n      : [],\n    shippingInfo: localStorage.getItem(\"shippingInfo\")\n      ? JSON.parse(localStorage.getItem(\"shippingInfo\"))\n      : {},\n  },\n};\n\nconst middlware = [thunk];\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middlware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}